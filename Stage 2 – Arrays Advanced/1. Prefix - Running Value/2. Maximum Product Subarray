https://leetcode.com/problems/maximum-product-subarray/description/

https://www.youtube.com/watch?v=hnswaLJvr6g

Input : Array
Keywords : maximise prod, contiguous subarray, with no constraints on size, value, or content. => Kadane's  
          [Sliding window should not be used here because this has no constraints or conditions like find max sum of subarray where sum <= X or
          Maximum Sum of Subarray of Size K]
Constraints: 1 <= nums.length <= 2 * 10^4 => O(n) , O(nlogn)


//Brute Force 
//TC = O(n^2)
//SC = O(1)
class Solution {
    public int maxProduct(int[] nums) {
        int maxProduct = Integer.MIN_VALUE;
        int n = nums.length;
        for(int i = 0; i < n; i++){
            int product = 1;
            for(int j = i; j < n; j++){
                product = product * nums[j];
                maxProduct = Math.max(maxProduct, product);
            }
        }
        return maxProduct;
    }
}

//Optimal - Kedane's algo 
//TC = O(n) 
//SC = O(1)
class Solution {
    public static int maxProduct(int[] nums) {
        // Edge case: if array is empty, return 0
        if (nums == null || nums.length == 0) 
            return 0;

        // maxProd stores the maximum product ending at the current index
        // minProd stores the minimum product ending at the current index (important when negative numbers are involved)
        // result keeps track of the maximum product found so far
        int maxProd = nums[0];
        int minProd = nums[0];
        int result = nums[0];

        // Traverse the array starting from the second element
        for (int i = 1; i < nums.length; i++) {
            int current = nums[i];

            // If the current number is negative, swap maxProd and minProd
            // because multiplying by a negative flips the sign
            if (current < 0) {
                int temp = maxProd;
                maxProd = minProd;
                minProd = temp;
            }

            // Compute max and min product ending at current index
            // Either start fresh from current or extend the previous subarray
            maxProd = Math.max(current, maxProd * current);
            minProd = Math.min(current, minProd * current);

            // Update the result with the maximum product found so far
            result = Math.max(result, maxProd);
        }

        return result;
    }
}
