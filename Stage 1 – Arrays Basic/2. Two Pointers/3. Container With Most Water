//https://leetcode.com/problems/container-with-most-water/description/

https://www.youtube.com/watch?v=UuiTKBwPgAo

//Input: height = [1,8,6,2,5,4,8,3,7]
//Output: 49
//Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.


Input : Array
Keywords : Find Pair for optimal solution => Two pointers
Constraint : 2 <= n <= 10^5 => O(n log n), O(n) should be ok
            0 <= height[i] <= 10^4



//Bruteforce - 2 loops
TC = O(n^2)
SC = O(1)
class Solution {
    public int maxArea(int[] height) {
        int n = height.length;
        int maxArea = 0;
        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n ; j++){
                int currentHeight = Math.min(height[i], height[j]);
                int currentWidth = j - i;
                int area = currentHeight * currentWidth;
                maxArea = Math.max(area, maxArea);
            }
        }
        return maxArea;
    }
}

//Optimal Approach - Two pointers
//TC = O(n)
//SC = O(1)
class Solution {
    public int maxArea(int[] height) {
        int n = height.length;
        int left = 0;
        int right = n - 1;
        int maxArea = 0;
        while(left < right){
            int currentHeight = Math.min(height[left], height[right]);
            int currentWidth = right - left;
            int area = currentHeight * currentWidth;
            maxArea = Math.max(maxArea, area);

             // Move the pointer with the smaller height to search for a taller wall, 
             // which could increase the minimum height and potentially maximize the area.
            if(height[left] < height[right])
                left++;
            else
                right--;            
        }
        return maxArea;
    }
}
