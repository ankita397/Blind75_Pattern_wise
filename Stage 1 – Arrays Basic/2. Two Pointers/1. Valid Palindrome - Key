//https://leetcode.com/problems/valid-palindrome/

https://www.youtube.com/watch?v=jJXJ16kPFWg

//Input: s = "A man, a plan, a canal: Panama"
//Output: true
//Explanation: "amanaplanacanalpanama" is a palindrome.

Input : String
Keywords : palindrome => Two Pointers
Constraint : 1 <= s.length <= 2 * 10 ^ 5 => O(n)/O(nlogn) should be ok

//Brute force - Remove non-alphanumeric characters and then reverse the string to check if palindrome.
//TC = O(n)
//SC = O(n) 
class Solution {
    public boolean isPalindrome(String s) {
        StringBuilder cleanedSB = new StringBuilder();
        String lowerCaseS = s.toLowerCase();
        for(char c : lowerCaseS.toCharArray()){
            if((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')){
                cleanedSB.append(c);
            }
        }

        String cleanString = cleanedSB.toString();
        String reverseString = cleanedSB.reverse().toString();

        return cleanString.equals(reverseString);
    }
}

//Optimal Approach - Two pointers

//TC - O(n)
//SC - O(1)

class Solution {
    public boolean isPalindrome(String s) {
        int n = s.length();
        int left = 0;
        int right = n-1;
        s = s.toLowerCase();

        // Loop while the left pointer is less than the right pointer 
        while(left < right){
            char leftChar = s.charAt(left);
            char rightChar = s.charAt(right);
            
            // If the left character is not a letter or digit, skip it by moving the left pointer
            if(!(leftChar >= 'a' && leftChar <= 'z') && !(leftChar >= '0' && leftChar <= '9')){
                left++;
                continue;
            }
            // If the right character is not a letter or digit, skip it by moving the right pointer
            if(!(rightChar >= 'a' && rightChar <= 'z') && !(rightChar >= '0' && rightChar <= '9')){
                right--;
                continue;
            }
            // return false as soon as one char mismatch happens
            if(leftChar != rightChar){
                return false;
            }
            //keep incrementing left and decrementing right as long as the characters match
            left++;
            right--;
        }
        return true;
    }
}
