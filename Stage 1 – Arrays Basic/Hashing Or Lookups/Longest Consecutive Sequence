//https://leetcode.com/problems/longest-consecutive-sequence/description/

//https://www.youtube.com/watch?v=oO5uLE7EUlM&list=PLgUwDviBIf0oF6QL8m22w1hIDC1vJ_BHz&index=29

//Brute Force 
TC = O(nlog(n))
SC = O(1)
class Solution {
    public int longestConsecutive(int[] nums) {
        int n = nums.length;
        if(n == 0) // empty array
            return 0;
        Arrays.sort(nums);
        int currentLen = 1; // maintains the length for current consecutive elements sequence
        int maxLen = 1; // Initialize max sequence length to 1 so that even if the loop never runs or no sequences are found, you still return 1 correctly for single-element sequences.
        for(int i = 0; i < n-1; i++){
            if(nums[i] == nums[i+1]){ //Skip duplicates
                continue;
            }else if(nums[i] == nums[i+1]-1){// Consecutive number
                currentLen++;
                
            }else{
                currentLen = 1;//Start of new sequence
            }
            maxLen = Math.max(maxLen, currentLen);
        }
        return maxLen;
    }
}

//Optimal 
//Approach : HashSet
//Here, we find the first element of every consecutive seq and check for first_element+1 in the set

//TC = O(N) + O(2*N) ~ O(3*N), where N = size of the array.
        Reason: O(N) for putting all the elements into the set data structure. After that for every starting element, 
        we are finding the consecutive elements. Though we are using nested loops, the set will be traversed at most twice in the worst case. 
        So, the time complexity is O(2*N) instead of O(N2).
//SC: O(N), as we are using the set data structure to solve this problem.
class Solution {
    public int longestConsecutive(int[] nums) {
        int n = nums.length;
        if(n == 0) // empty array
            return 0;
        
        int maxLen = 0;
        //Add all elements to a HashSet for O(1) lookup
        Set<Integer> set = new HashSet<Integer>();
        for(int num : nums){
            set.add(num);
        }

        //Go through all the numbers in the set
        for(int num : set){
            //Start counting current length only if num - 1 does not exists in the set.
            //This means its the start of a new sequence

            //if num is the first one in out seq, the elnumement-1 will not be a part of the set
            //eg : [1,2,4,5,6] - [1,2] and [4,5,6] are the 2 seqs
            //For 1 and 4 to be first numbers in their resp seqs, 0 and 3 should not be there in the set

            if(!(set.contains(num-1))){
                int currentNum = num; // starting number of a sequence
                int currentLen = 1; // length for current consecutive elements sequence

                //Increment currentNum and currentLen as long as the set contains the next consecutive number
                 //For [4,5,6] , here currentNum = 4
                //Check if 4+1=5 is present in set => modify currentNum = 5 and currentLen = 2
                //Check if 5+1=6 is present in set => modify currentNum = 6 and currentLen = 3
                //Check if 6+1=7 is present in set => not present = out of loop
                while(set.contains(currentNum+1)){
                    currentNum++;
                    currentLen++;
                }
                maxLen = Math.max(maxLen,currentLen);
            }
        }
        return maxLen;
    }
}
