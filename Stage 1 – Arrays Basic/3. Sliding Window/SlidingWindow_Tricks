1. Constant Window
  a. Move left and right by same value to keep window size same.
  b. right < n-1, since r++ with make it go out of bounds and here we keep window constant
2. Longest subarray/sumstring where <condition>
  a. Brute Force - Generate all substrings 
    for(i = 0; i < n; i++){  
      for(j = i; j < n; j++){
        ...
      }
    }
  b. Two pointer and sliding window 
    i. Shrink or move left when condition is invalid
    ii. Expand or move right when condition is valid
      while(r < n){
        <invalid condition>
          left++
        ...
        <valid condition>
          calculate maxLen/minLen
          keep track of statring and ending index of substring(in case we need the substring as answer)
        right++;
      }
    iii. If for (ii), TC = O(2N) and only maxLen or minLen is asked and not the string, some may ask to optimise more to make TC = O(N)
      -> then we can compromise on substring and optimise more.
      -> Keep shrinking window or moving left to keep the maxLen or minLen same, ignoring the current substring till we get valid condition.
          And then starting expanding(move right) again.

General :
1. Shrink or move left when condition is invalid
2. Expand or move right when condition is valid
3. length always means length of substring from left to right - length = right-left+1
4. Code the invalid condition first.
5. freq[s.charAt(right)-'A'] - This is typically used when you are working with alphabetic characters, and you only want to focus
        on the letters 'A' to 'Z' (or their lowercase equivalents by normalizing case). Here, you're subtracting 'A' to map the ASCII value of
        the character into a smaller range (0 to 25 for uppercase letters).
        Context: This is more efficient if you only need to handle letters because you can use an array of size 26 instead of 256. 
        You should use this when you're guaranteed that the input is alphabetic or you are working with uppercase letters (or you normalize 
        the case).
6. freq[s.charAt(right) - This is generally useful when you want to track the frequency of any character (including special characters
        or any other non-letter characters) in the string.
        Context: The array is large enough to cover all possible characters in the ASCII or Unicode table. 
        You use this when you're working with all characters without a specific restriction (for example, alphanumeric, special characters,
        or full ASCII).
