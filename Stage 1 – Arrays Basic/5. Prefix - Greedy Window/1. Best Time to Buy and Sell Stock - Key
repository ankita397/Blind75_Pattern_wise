https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/

https://www.youtube.com/watch?v=excAOvwF_Wk

Input : Array
Keywords : Maximize profit => Greedy
Constraints : 1 <= prices.length <= 10 ^ 5 => O(n log n), O(n)

//Bruteforce - Try every possible pair of days (i, j) where j > i. 
                Buy on day i, sell on day j. 
                Track the maximum profit from all valid pairs.
//TC = O(n^2)
//SC = O(1)
class Solution {
    public int maxProfit(int[] prices) {
        int maxProfit = 0;
        int n = prices.length;

        for(int i = 0; i < n; i++){
            for(int j = i+1; j < n; j++){
                int profit = prices[j] - prices[i];  // Buy on day i, sell on day j. 
                maxProfit = Math.max(maxProfit, profit);
            }
        }
        return maxProfit;
    }
}

//Optimal : If we wanna sell on i'th day, then we have to buy on the minimum price from day 0 to i-1. 
            //So, we need to keep track of the minimum price.

//TC = O(n) 
//SC = O(1)
class Solution {
    public int maxProfit(int[] prices) {
        int maxProfit = 0;
        int n = prices.length;
        int minPrice = Integer.MAX_VALUE;
        for(int price : prices){
            minPrice = Math.min(minPrice, price);  // Update minPrice if we find a lower price
            int profit = price - minPrice;  // Calculate potential profit
            maxProfit = Math.max(maxProfit, profit);  //Calculate maxProfit
        } 
        return maxProfit;
    }
}
