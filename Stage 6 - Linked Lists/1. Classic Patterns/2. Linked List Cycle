https://leetcode.com/problems/linked-list-cycle/description/

https://www.youtube.com/watch?v=wiOo4DC5GGA

Input : Node
Keywords : cycle, linked list
Constraints : -10^5 <= Node.val <= 10^5  


//Brute force - Use HashMap to store occurence of a node. If node already exists in our map, cycle detected.

//TC = O(n) - visit each node in the linked list + map operations O(1)
//SC = O(n), store all nodes in HashMap

public class Solution {
    public boolean hasCycle(ListNode head) {
        Map<ListNode, Integer> map = new HashMap<>();
        ListNode temp = head;
        while(temp != null){
            if(map.containsKey(temp)){
                return true;
            }
            map.put(temp, 1); // store entire node and not just its value since value can repeat even without cycle.
            temp = temp.next;
        }
        return false;
    }
}


