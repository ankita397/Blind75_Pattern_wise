https://leetcode.com/problems/insert-interval/description/

https://www.youtube.com/watch?v=xxRE-46OCC8

Input : array
Keywords : interval, start end =>  Interval Pattern
Constraints : 0 <= intervals.length <= 10^4 => O(n), O(nlog n)

Approach - Greedy

//TC = O(n)
//SC = O(n)

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        List<int[]> result = new ArrayList<>();
        int i = 0;
        int n = intervals.length;

        // Eg: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
        // [[1, 2],[3, 5],[6, 7],[8, 10],[12, 16]]
        //           [4,8]

        //intervals[i][0] - start of all intervals
        //intervals[i][1] - end of all intervals
        //newInterval[0] - start of newInterval
        //newInterval[1] - end of newInterval
        
        // Add all the intervals ending before newInterval starts
        // left part which does not overlap - [1, 2]
        // Only [1,2] ends before 4, so result = [[1,2]]
        while (i < n && intervals[i][1] < newInterval[0]) {
            result.add(intervals[i]);
            i++;
        }

        // overlap part - [3, 5],[6, 7],[8, 10].  
        // These intervals start before newInterval ends, so they overlap
        // Eg: [3,5], [6,7], [8,10] all overlap with [4,8], so newInterval becomes [3,10]
        while (i < n && intervals[i][0] <= newInterval[1]) {
            newInterval[0] = Math.min(newInterval[0], intervals[i][0]);
            newInterval[1] = Math.max(newInterval[1], intervals[i][1]);
            i++;
        }
        result.add(newInterval); // Add the merged interval to the result

        //right part which does not overlap - [12, 16]
        // Eg: remaining interval is [12,16], so result becomes [[1,2],[3,10],[12,16]]
        while (i < n) {
            result.add(intervals[i]);
            i++;
        }

        return result.toArray(new int[result.size()][]);
    }
}
