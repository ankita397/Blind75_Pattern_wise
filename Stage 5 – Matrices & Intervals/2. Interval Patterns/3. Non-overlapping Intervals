https://leetcode.com/problems/non-overlapping-intervals/description/
https://leetcode.com/problems/non-overlapping-intervals/solutions/3785409/beat-s-100-c-java-python-beginner-friendly

https://www.youtube.com/watch?v=HDHQ8lAWakY (Same logic just a little implementation)

Input : array
Keywords : interval, overlapping =>  Interval Pattern
Constraints : 1 <= intervals.length <= 10^5 => O(n), O(nlog n)

//Optimal - Greedy - Trick is to keep track of the end time of the last non-overlapping meeting.

Sort intervals by their ending time.
Keep track of the end of the last non-overlapping interval.
For each remaining interval:
  - If it overlaps with the last one kept, count it for removal.
  - Otherwise, update the end of the last non-overlapping interval.
Return the total number of intervals removed.


//TC = O(nlogn)
//SC = O(1)
class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        int n = intervals.length;
        
        int countErase = 0;
        
        //Sort by end time, not start time
        // We sort by end time so that we iterate through and always keep the interval that ends earliest (non-overlapping). 
        // This ensures we can fit in as many non-overlapping intervals as possible. 

        Arrays.sort(intervals, (a,b) -> a[1]-b[1]);
        
        // Keep track of the end of the last non-overlapping interval
        int endOfLast = intervals[0][1];

        for(int i = 1; i < n; i++){
            if(intervals[i][0] < endOfLast){
                // No need to update prevEnd, since we keep the interval with smaller end time
                // Increment count as overlap detected
                countErase++;
            }else{
                // No overlap, update endOfLast
                endOfLast = intervals[i][1];
            }
        }
        return countErase;
    }
}

// [1 2] [2 3] [3 4] [1 3]
// [1 2] [1 3] [2 3] [3 4] - sorted
// 1    2
// 1        3   
//      2   3
//          3   4
// [1 3] can be removed to make the resy of the intervals non-overlapping
