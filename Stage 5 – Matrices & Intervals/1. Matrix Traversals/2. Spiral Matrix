https://leetcode.com/problems/spiral-matrix/description/

https://www.youtube.com/watch?v=3Zv-s9UUrFM

Input : Matrix
Keyword : Matrix, traverse pattern(spiral)
Constraints: 1 <= m, n <= 10 => n ^ 2


//Optimal - This has only optimal solution.
//TC = O(rows*cols)
//SC = O(rows*cols)

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        //00 -> 01 -> 02 -> 12 -> 22 -> 21 -> 20 -> 10 -> 11

        //right -> bottom -> left -> top

        int rows = matrix.length;
        int cols = matrix[0].length;

        // set the 4 boundaries of the matrix
        int left = 0, top = 0;
        int right = cols - 1, bottom = rows - 1;
        List<Integer> result = new ArrayList<Integer>();

        // keep looping as long as there is still a valid rectangle (not crossed over)
        while(top <= bottom && left <= right){
            //left to right
            for(int i = left ; i <= right; i++){
                result.add(matrix[top][i]);
            }
            top++; // top row is done, move top boundary towards down for inner spiral
            
            //top to bottom
            for(int i = top; i <= bottom; i++){
                result.add(matrix[i][right]);
            }
            right--;// right column is done, move right boundary towards left
            
            //right to left
            if(top <= bottom){ // only traverse the bottom row if it's still left (not already covered)
                for(int i = right; i >= left; i--){
                    result.add(matrix[bottom][i]);
                }
                bottom--;// bottom row is done, move bottom boundary towards up
            }
            
            //bottom to top
            if(left <= right){// only traverse the left column if it's still left (not already covered)
                for(int i = bottom; i >= top; i--){
                    result.add(matrix[i][left]);
                }
                left++;// left row is done, move bottom boundary towards right
            }
        }
        return result;
    }
}

        left            right
top       1    2    3    4
          5    6    7    8 
bottom    9    10   11   12

top = 0
left = 0
right = cols - 1 = 3
bottom = rows - 1 = 2 
