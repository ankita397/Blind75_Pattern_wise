https://leetcode.com/problems/longest-palindromic-substring/description/

https://www.youtube.com/watch?v=qhFCfYr2XOc - similar chatGpt/own

Input : String
Keywords : palindrome => two pointers
Constraints : 1 <= s.length <= 1000 => O(nÂ²), O(n log n), O(n)

//Bruteforce - Generate all substrings and check for palindromes. 
              The key idea behind checking if a string (or a substring) is a palindrome is to compare the characters at the outermost positions first, 
              and then move inward to check the next pair of characters, and so on.
//TC = O(n^3)
//SC = O(1)
class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        if(s == null || n == 0)
            return "";
        int start = 0;
        int maxLen = 1;
        for(int i = 0; i < n; i++){
            for(int j = i; j < n ; j++){
                int len = 0;
                if(isPalindrome(i, j, s)){
                    len = j - i + 1;
                    if (len > maxLen) {  // only update if strictly longer - Update start only if len > maxLen, not when len == maxLen
                        maxLen = len;
                        start = i;
                    }
                }
            }
        }
        return s.substring(start, start + maxLen);
    }

    private boolean isPalindrome(int left, int right, String s){
        while(left < right){
            if(s.charAt(left) != s.charAt(right)){
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}


//Optimal - Two pointers
// Start from center and move to left and right to check for palindromes 
// For odd-length palindromes: Consider the current character as the center
// For even-length palindromes: Consider the current and next character as the center

//TC = O(n^2)
//SC = O(n)

class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        if (s == null || n == 0) 
            return "";

        String longestPalindrome = "";  // store the longest palindrome found

        for (int center = 0; center < n; center++) {
            // Odd-length palindrome
            String palindromeOdd = expandAndGetPalindrome(s, center, center);
            if (palindromeOdd.length() > longestPalindrome.length()) {
                longestPalindrome = palindromeOdd;
            }

            // Even-length palindrome
            String palindromeEven = expandAndGetPalindrome(s, center, center + 1);
            if (palindromeEven.length() > longestPalindrome.length()) {
                longestPalindrome = palindromeEven;
            }
        }

        return longestPalindrome;
    }

    // Expand from center and return the palindrome substring
    private String expandAndGetPalindrome(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        // After expanding, left and right are one step beyond the palindrome
        // So the actual palindrome is from left+1 to right (exclusive)
        return s.substring(left + 1, right);
    }
}
