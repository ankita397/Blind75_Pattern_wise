https://leetcode.com/problems/number-of-1-bits/description/

https://www.youtube.com/watch?v=2HWYWSgt4zU

Input : int
Keyword : bit => Bit manipulation
Constraints : 1 <= n <= 2^31 - 1 


//Bruteforce
//TC = O(1)
//SC = O(1)
class Solution {
    public int hammingWeight(int n) {
        int count = 0;
        while(n > 0){
            if(n % 2 == 1){
                count++; 
            }
            n = n / 2;
        }
        return count;
    }
}


//Optimal -> n & (n-1) turns off the last set bit (removes the last 1 bit/ set bit) and then we count that set bit.
//TC = O(1) - while loop does not run through all numbers till n as we modify n
//SC = O(1)

class Solution {
    public int hammingWeight(int n) {
        int count = 0;
        while(n > 0){
            n = n & (n-1); //removes the rightmost 1-bit
            count++;
        }
        return count;
    }
}
